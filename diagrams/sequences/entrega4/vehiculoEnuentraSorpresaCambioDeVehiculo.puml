@startuml
title "vehiculoEncuentraSorpresaCambioDeVehiculo"
actor testCase

testCase -> "calle1 : Calle" : guardarInteractuable(sorpresa1 : SorpresaCambioVehiculo)
testCase -> "calle2 : Calle" : guardarInteractuable(sorpresa2 : SorpresaCambioVehiculo)
testCase -> "mapa : Mapa" : guardarCalle(posicion1,calle1)
testCase -> "mapa : Mapa" : guardarCalle(posicion2,calle2)
testCase -> "mapa : Mapa" : moverVehiculo(vehiculo : Vehiculo, derecha : Derecha)
"mapa : Mapa" -> "direccion : Direccion" : calcularPosicionSiguiente(posicionDelVehiculo : Posicion)
alt not posicionDelVehiculo.estaEnLimites(anchoMapa, this.altoMapa)
"mapa : Mapa" -> "direccion : Direccion" : opuesto()
"direccion : Direccion" -> "posicion : Posicion" : calcularPosicionSiguiente(posicionDelVehiculo)
end
"mapa : Mapa" -> "vehiculo : Vehiculo" : aumentarMovimientos(1)
alt calle != null
"mapa : Mapa" -> "calle : Calle" : atravesarCalle(vehiculo: Vehiculo)
loop Interactuable i: interactuables
"calle : Calle" -> "interactuable : Interactuable" : interactuarConVehiculo(vehiculo : Vehiculo)
end
end
"mapa : Mapa" -> "direccion : Direccion" : calcularPosicionSiguiente(posicionDelVehiculo)
testCase -> "mapa : Mapa" : moverVehiculo(vehiculo : Vehiculo, derecha : Derecha)
testCase -> "vehiculo : Vehiculo" : es(camioneta : Camioneta)
"vehiculo : Vehiculo" -> testCase : "camioneta"
@enduml
